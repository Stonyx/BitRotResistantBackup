#!/bin/bash
#
# Copyright (C) 2021 Stonyx
# http://www.stonyx.com
#
# This script is free software. You can redistribute it and/or modify it under the terms of the GNU
# General Public License Version 3 (or at your option any later version) as published by The Free
# Software Foundation.
#
# This script is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# If you did not received a copy of the GNU General Public License along with this script see
# http://www.gnu.org/copyleft/gpl.html or write to The Free Software Foundation, 675 Mass Ave,
# Cambridge, MA 02139, USA.

# Create a function called to check if a required command is available
function check_if_available()
{
  # Save the passed in variables
  local command="$1"

  # Check if the command is not available
  if ! command -v "$command" > /dev/null
  then
    echo "Command $command is required but is not available." >&2
    exit 1
  fi
}

# Create a function called to check if a command was successful
function check_if_successful()
{
  # Save the passed in variable
  local command="$1"
  local -i exit_code="$2"

  # Check if the command was not successful
  if (( $exit_code != 0 ))
  then
    echo "An error occurred running $command command." >&2
    exit 1
  fi
}

# Create a function called to perform the backup with no dependees
function perform_backup()
{
  # Save passed in variables
  local device="$1"
  local backup_directory="$2"
  local compression_level="$3"

  # Get the device name from the device
  local device_name="${device##*/}"

  # Perform the backup and redirect stdout to stderr so as not to interfere with the return
  #   value this function
  "$ddinc" -b "$device" -o "$backup_directory/$device_name.dd.xz" \
    -d "bs=1M iflag=fullblock status=progress" -c -x "-$compression_level -T 0" 1>&2

  # Check if performing the backup failed
  if (( $? != 0 ))
  then
    return 1
  fi

  # Return the path to the backup file
  echo -n "$backup_directory/$device_name.dd.xz"
  return 0
}

# Create a function called to perform the backup with dependees
function perform_backup_with_dependees()
{
  # Save passed in variables
  local device="$1"
  local backup_directory="$2"
  local dependee_directory="$3"
  local compression_level="$4"

  # Get the device name from the device
  local device_name="${device##*/}"

  # Check if a dependees file doesn't exist in the backup dependee directory
  if [[ ! -e "$dependee_directory/$device_name.dd.dependees" ]]
  then
    # Perform the backup and redirect stdout to stderr so as not to interfere with the return
    #   value of this function
    # Note: since data on devices usually doesn't move only a few megabytes from it's original
    #       location, we are using the smallest possible source window size (which determines
    #       how much the data can shift and still be considered the same) along with disabling
    #       compression, secondary compression, and small string matching compression to
    #       significantly improve the speed of xdelta3
    "$ddinc" -i "$dependee_directory/$device_name.dd.xz" -b "$device" \
      -o "$backup_directory/$device_name.dd.xdelta3.xz" \
      -d "bs=1M iflag=fullblock status=progress" -l "-B 524288 -0 -S none -N" -c \
      -x "-$compression_level -T 0" 1>&2

    # Check if performing the backup failed
    if (( $? != 0 ))
    then
      return 1
    fi

    # Convert the dependee directory backup file path into a path relative to the backup directory
    #   and save it to the new dependee file
    realpath --no-symlinks --relative-to="$backup_directory" \
      "$dependee_directory/$device_name.dd.xz" > \
      "$backup_directory/$device_name.dd.dependees"
  else
    # Perform the backup and redirect stdout to stderr so as not to interfere with the return
    #   value of this function
    # Note: since data on devices usually doesn't move only a few megabytes from it's original
    #       location, we are using the smallest possible source window size (which determines
    #       how much the data can shift and still be considered the same) along with disabling
    #       compression, secondary compression, and small string matching compression to
    #       significantly improve the speed of xdelta3
    "$ddinc" -f "$dependee_directory/$device_name.dd.dependees" \
      -i "$dependee_directory/$device_name.dd.xdelta3.xz" -b "$device" \
      -o "$backup_directory/$device_name.dd.xdelta3.xz" \
      -d "bs=1M iflag=fullblock status=progress" -l "-B 524288 -0 -S none -N" -c \
      -x "-$compression_level -T 0" 1>&2

    # Check if performing the backup failed
    if (( $? != 0 ))
    then
      return 1
    fi

    # Copy the contents of the existing depenee file into the new depenee file
    echo "$(< "$dependee_directory/$device_name.dd.dependees")" > \
      "$backup_directory/$device_name.dd.dependees"

    # Convert the dependee directory backup file path into a path relative to the backup directory
    #   and save it to the new dependee file
    realpath --no-symlinks --relative-to="$backup_directory" \
      "$dependee_directory/$device_name.dd.xdelta3.xz" >> \
      "$backup_directory/$device_name.dd.dependees"
  fi

  # Return the path to the backup file
  echo -n "$backup_directory/$device_name.dd.xdelta3.xz"
  return 0
}

# Create a function called to verify the backup with no dependees
function verify_backup()
{
  # Save passed in variables
  local device="$1"
  local backup_directory="$2"

  # Get the device name from the device
  local device_name="${device##*/}"

  # Perform a restore and pipe it to the hash command
  # Note: the command after the semi colon is an if statement that checks if the exit codes from
  #       both commands involved in the pipe are 0 and it's this command's exit code that is
  #       checked afterwards
  local hash="$("$ddinc" -r "$backup_directory/$device_name.dd.xz" \
    -d "bs=1M iflag=fullblock status=progress" -c | sha1sum; [[ "\${PIPESTATUS[@]}" == "0 0" ]])"

  # Check if verifying the backup failed
  if (( $? != 0 ))
  then
    return 1
  fi
  
  # Return just the hash of the restored backup
  echo -n "${hash%% *}"
  return 0
}

# Create a function called to verify the backup with dependees
function verify_backup_with_dependees()
{
  # Save passed in variables
  local device="$1"
  local backup_directory="$2"

  # Get the device name from the device
  local device_name="${device##*/}"

  # Perform a restore and pipe it to the hash command
  # Note: the command after the semi colon is an if statement that checks if the exit codes from
  #       both commands involved in the pipe are 0 and it's this command's exit code that is
  #       checked afterwards
  local hash="$("$ddinc" -f "$backup_directory/$device_name.dd.dependees" \
    -r "$backup_directory/$device_name.dd.xdelta3.xz" \
    -d "bs=1M iflag=fullblock status=progress" -c | sha1sum; [[ "\${PIPESTATUS[@]}" == "0 0" ]])"
  
  # Check if verifying the backup failed
  if (( $? != 0 ))
  then
    return 1
  fi

  # Return just the hash of the restored backup
  echo "${hash%% *}"
  return 0
}

# Declare options variables and define default values
declare -a backup_devices=()
declare -a restore_devices=()
declare backup_directory=""
declare dependee_directory=""
declare -i compression_level=0
declare -i fast_mode=0

# Get the options
while getopts "b:r:l:d:0123456789fh" option
do
  case $option in
    b)
      backup_devices+=("$OPTARG")
      ;;
    r)
      restore_devices+=("$OPTARG")
      ;;
    l)
      backup_directory="${OPTARG%/}"
      ;;
    d)
      dependee_directory="${OPTARG%/}"
      ;;
    [0-9])
      compression_level=$option
      ;;
    f)
      fast_mode=1
      ;;
    h)
      echo "Usage: brrb (-b device | -r device) -l directory [-d directory] [-0..9] [-f]"
      echo
      echo "-b    device to backup (can be specified multiple times)"
      echo "-r    device to restore (can be specified multiple times)"
      echo "-l    backup directory"
      echo "-d    backup dependee directory"
      echo "-0..9 compression level (default is 0)"
      echo "-f    fast mode that skips re-computing hashes"
      echo
      echo "Backup example"
      echo "brrb -b /dev/sda -b /dev/sdb -l ./backup/february -d ./backup/january"
      echo
      echo "Restore example"
      echo "brrb -r /dev/sda -r /dev/sdb -l ./backup/february"

      exit 0
      ;;
  esac
done
shift $((OPTIND - 1))

# Check if the needed commands are available
check_if_available "mv"
check_if_available "realpath"
check_if_available "rm"
check_if_available "par2"
check_if_available "sha1sum"

# Get the directory this script is located in (without relying on dirname command)
declare brrb_directory
if [[ "$BASH_SOURCE" != *"/"* ]]
then
  brrb_directory="."
else
  brrb_directory="${BASH_SOURCE%/*}"
fi

# Declare needed variables
declare ddinc="$brrb_directory/ddinc"

# Check if the ddinc script is not located in the script's directory
if [[ ! -e "$ddinc" || ! -f "$ddinc" || ! -x "$ddinc" ]]
then
  # Check if ddinc is available as a command in the path
  check_if_available "ddinc"

  # Use ddinc as a command in the path
  ddinc="ddinc"
fi

# Make sure a backup device or a restore device was specified and not both
if (( ${#backup_devices[@]} == 0 && ${#restore_devices[@]} == 0 ))
then
  echo "No backup devices or restore devices were specified.  See help (-h) for details." >&2
  exit 1
fi
if (( ${#backup_devices[@]} != 0 && ${#restore_devices[@]} != 0 ))
then
  echo "Both backup and restore devices were specified.  See help (-h) for details." >&2
  exit 1
fi

# Make sure a backup directory was specified
if [[ -z "$backup_directory" ]]
then
  echo "No backup directory was specified.  See help (-h) for details." >&2
  exit 1
fi

# Check if there are devices to backup
if (( ${#backup_devices[@]} != 0 ))
then
  # Loop through the devices and check if any files that will be written to exist
  for device in "${backup_devices[@]}"
  do
    # Get the device name from the device
    declare device_name="${device##*/}"

    # Check if any files that will be written to exist
    if [[ -e "$backup_directory/$device_name.dd.sha1" || \
      (-z "$dependee_directory" && (-e "$backup_directory/$device_name.dd.xz" || \
      -e "$backup_directory/$device_name.dd.xz.sha1" || \
      -e "$backup_directory/$device_name.dd.xz.par2" || \
      -e "$backup_directory/$device_name.dd.xz.vol00+50.par2")) || \
      (-n "$dependee_directory" && (-e "$backup_directory/$device_name.dd.xdelta3.xz" || \
      -e "$backup_directory/$device_name.dd.xdelta3.xz.sha1" || \
      -e "$backup_directory/$device_name.dd.xdelta3.xz.par2" || \
      -e "$backup_directory/$device_name.dd.xdelta3.xz.vol00+50.par2")) ]]
    then
      echo "One or more backup files already exist in the specified backup directory." >&2
      exit 1
    fi
  done

  # Update the user
  echo "Computing device hashes ..."

  # Loop through the backup devices and compute the device hashes
  # Note: since we write the hash to a file as soon as it is computed we don't need to store it in
  #       an array first which is what we do when we re-compute the device hashes at the end of the
  #       backup process
  for device in "${backup_devices[@]}"
  do
    # Asynchronously run the following commands
    {
      # Compute the device hash by running the hash command
      declare hash="$(sha1sum "$device")"
      check_if_successful "sha1sum" $?

      # Write just the hash to a file
      echo -n "${hash%% *}" > "$backup_directory/${device##*/}.dd.sha1"
    } &
  done

  # Wait for all asynchronous hash commands to finish
  wait

  # Loop through the backup devices and print the device hashes
  for device in "${backup_devices[@]}"
  do
    # Print the device hash by retrieving it from the file
    echo "SHA1 hash for \"$device\" device is"
    echo "$(< "$backup_directory/${device##*/}.dd.sha1")"
  done

  # Declare needed variables
  declare -A device_backup_file_map

  # Loop through the backup devices and perform the backups
  for device in "${backup_devices[@]}"
  do
    # Update the user
    echo
    echo "Backing up \"$device\" device ..."

    # Check if there is no dependee for this backup
    if [[ -z "$dependee_directory" ]]
    then
      # Perform the backup with no dependee and save the returned backup file path to the device
      #   backup file map
      device_backup_file_map["$device"]="$(perform_backup "$device" "$backup_directory" \
        "$compression_level")"
    else
      # Perform the backup with dependees and save the returned backup file path to the device
      #   backup file map
      device_backup_file_map["$device"]="$(perform_backup_with_dependees "$device" \
        "$backup_directory" "$dependee_directory" "$compression_level")"
    fi

    # Check if performing the backup failed
    if (( $? != 0 ))
    then
      echo "An error has occurred performing the backup." >&2
      exit 1
    fi

    # Update the user
    echo
    echo "Computing \"${device_backup_file_map["$device"]}\" backup file hash ..."

    # Compute the backup file hash by running the hash command
    declare hash="$(sha1sum "${device_backup_file_map["$device"]}")"
    check_if_successful "sha1sum" $?

    # Write just the hash to a file
    echo -n "${hash%% *}" > "${device_backup_file_map["$device"]}.sha1"

    # Print the backup file hash by retrieving it from the file
    echo "SHA1 hash for \"${device_backup_file_map["$device"]}\" backup file is"
    echo "$(< "${device_backup_file_map["$device"]}.sha1")"
  done

  # Loop through the devices and generate par2 files
  for device in "${backup_devices[@]}"
  do
    # Update the user
    echo
    echo "Generating par2 file for \"${device_backup_file_map["$device"]}\" backup file ..."

    # Generate the par2 file
    par2 create -b1000 -c50 -n1 -B"$backup_directory/" \
      "${device_backup_file_map["$device"]}.par2" "${device_backup_file_map["$device"]}"
    check_if_successful "par2" $?

    # Delete unnecessary par2 index file
    rm "${device_backup_file_map["$device"]}.par2"
    check_if_successful "rm" $?

    # Rename actual par2 file
    mv "${device_backup_file_map["$device"]}.vol00+50.par2" \
      "${device_backup_file_map["$device"]}.par2"
    check_if_successful "mv" $?
  done

  # Loop through the backup devices and verify the backups
  for device in "${backup_devices[@]}"
  do
    # Update the user
    echo
    echo "Verifying \"${device_backup_file_map["$device"]}\" backup file containing \"$device\"" \
      "device backup ..."

    # Check if there is no dependee for this backup
    if [[ -z "$dependee_directory" ]]
    then
      # Verify the backup with no dependee and save the returned hash
      declare hash="$(verify_backup "$device" "$backup_directory")"
    else
      # Verify the backup with dependees and save the returned hash
      declare hash="$(verify_backup_with_dependees "$device" "$backup_directory")"
    fi

    # Check if verifying the backup failed
    if (( $? != 0 ))
    then
      echo "An error has occurred verifying the backup."
      exit 1
    fi

    # Print the verification hash
    echo "SHA1 hash for the restored content of \"${device_backup_file_map["$device"]}\"" \
      "backup file is"
    echo "$hash"

    # Check if the verification hash matches the device hash
    if [[ "$hash" == "$(< "$backup_directory/${device##*/}.dd.sha1")" ]]
    then
      echo "which matches the \"$device\" device hash."
    else
      echo "which does NOT match the \"$device\" device hash."
      echo "An error has occurred." >&2
      exit 1
    fi
  done

  # Check if fast mode is disabled
  if (( $fast_mode == 0 ))
  then
    # Loop through the backup devices and compute the backup file hashes
    for device in "${backup_devices[@]}"
    do
      # Update the user
      echo
      echo "Re-computing \"${device_backup_file_map["$device"]}\" backup file hash ..."

      # Compute the backup file hash by running the hash command
      declare hash="$(sha1sum "${device_backup_file_map["$device"]}")"
      check_if_successful "sha1sum" $?

      # Keep just the hash
      hash="${hash%% *}"

      # Print the hash
      echo "SHA1 hash for \"${device_backup_file_map["$device"]}\" backup file is"
      echo "$hash"

      # Check if the hash matches the hash stored in the file
      if [[ "$hash" == "$(< "${device_backup_file_map["$device"]}.sha1")" ]]
      then
        echo "which matches the original hash."
      else
        echo "which does NOT match the original hash."
        echo "An error has occurred." >&2
      fi
    done

    # Update the user
    echo
    echo "Re-computing device hashes ..."

    # Asynchronously compute the device hashes and store them in an array
    declare -a device_hashes
    readarray -t device_hashes < <(
      for device in "${backup_devices[@]}"
      do
        # Run the hash comand
        sha1sum $device &
        check_if_successful "sha1sum" $?
      done
    )

    # Convert the device hashes array into an associative array (a.k.a. map)
    declare -A device_hash_map
    for device_hash in "${device_hashes[@]}"
    do
      device_hash_map["${device_hash##* }"]="${device_hash%% *}"
    done

    # Loop through the devices and check if the device hashes still match
    for device in "${backup_devices[@]}"
    do    
      # Print the hash
      echo "SHA1 hash for \"$device\" device is"
      echo "${device_hash_map["$device"]}"

      # Check if the hash matches the hash stored in the file
      if [[ "${device_hash_map["$device"]}" == "$(< "$backup_directory/${device##*/}.dd.sha1")" ]]
      then
        echo "which matches the original hash."
      else
        echo "which does NOT match the original hash."
        echo "An error has occurred." >&2
      fi
    done
  fi
#else
  # TODO: implement restore functionality
fi
